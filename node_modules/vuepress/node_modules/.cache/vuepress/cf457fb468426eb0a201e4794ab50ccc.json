{"remainingRequest":"/Users/yonekurayuuki/github/tcsympo2019/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yonekurayuuki/github/tcsympo2019/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yonekurayuuki/github/tcsympo2019/contents/README.md?vue&type=template&id=5b1ba798&","dependencies":[{"path":"/Users/yonekurayuuki/github/tcsympo2019/contents/README.md","mtime":1557726002641},{"path":"/Users/yonekurayuuki/github/tcsympo2019/node_modules/cache-loader/dist/cjs.js","mtime":1557060609636},{"path":"/Users/yonekurayuuki/github/tcsympo2019/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1557060610161},{"path":"/Users/yonekurayuuki/github/tcsympo2019/node_modules/cache-loader/dist/cjs.js","mtime":1557060609636},{"path":"/Users/yonekurayuuki/github/tcsympo2019/node_modules/vue-loader/lib/index.js","mtime":1557060610161},{"path":"/Users/yonekurayuuki/github/tcsympo2019/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557060615077}],"contextDependencies":[],"result":["\n<div class=\"content\"><p><div class=\"table-of-contents\"><ul><li><a href=\"#_3-秒の壁\">3 秒の壁</a></li><li><a href=\"#_3-秒経過後に-post-出来るか？\">3 秒経過後に POST 出来るか？</a></li><li><a href=\"#実際対策した結果はこちら\">実際対策した結果はこちら</a></li><li><a href=\"#aws-lambda-の場合\">AWS Lambda の場合</a></li><li><a href=\"#cloud-functions-for-firebase-の場合\">Cloud Functions for Firebase の場合</a></li></ul></div></p>\n<h1 id=\"はじめに\"><a class=\"header-anchor\" href=\"#はじめに\" aria-hidden=\"true\">#</a> はじめに</h1>\n<p>Slack Bot をサーバーレスで運用したい、という需要、それなりにあると思います。</p>\n<p>ここで Slack Bot と呼んでいるのは、例えば、こういうのです。\nhttps://github.com/saken649/NameThinking\nhttps://github.com/saken649/NameThinkingLambda\n<code>/ntcamel ユーザー名を取得する</code> と打ったら、<code>getUsername</code> と返してくれる、そんなのです。</p>\n<p>これを行うには、<a href=\"https://api.slack.com/slash-commands\" target=\"_blank\" rel=\"noopener noreferrer\">Slack API の Slash Commands<OutboundLink/></a> という機能を使います。\n普通に使う分には問題にはならないのですが、ことサーバーレスとなると、若干面倒な問題があります。</p>\n<h2 id=\"_3-秒の壁\"><a class=\"header-anchor\" href=\"#_3-秒の壁\" aria-hidden=\"true\">#</a> 3 秒の壁</h2>\n<p>この Slash Commands ですが、Slack が Bot にリクエストを投げてから 3,000ms 以内、つまり <strong>3 秒以内にレスポンスが返ってこないとタイムアウト</strong> になります。</p>\n<blockquote>\n<p>This confirmation must be received by Slack within 3000 milliseconds of the original request being sent, otherwise a Timeout was reached will be displayed to the user.</p>\n</blockquote>\n<p>cf. https://api.slack.com/slash-commands#responding_to_commands</p>\n<p>そしてサーバーレスならではの事情として、どうしても <strong>ランタイムを起動する時間が必要</strong> という問題があります。\ncf. <a href=\"https://d0.awsstatic.com/events/jp/2017/summit/devday/D4T7-2.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">全部教えます！　 サーバレスアプリのアンチパターン とチューニング<OutboundLink/></a></p>\n<p>↑の資料は Lambda の記述ですが、Lambda に限った話ではないでしょう。</p>\n<p>この 3 秒には、もちろん <strong>ランタイムの起動時間も含めて</strong>、なので、実は意外と厳しいです。\nコールドスタートしようものなら、3 秒はかなり厳しいです。というか無理では……\n例えば、上記紹介した NameThinking の場合だと、外部の API への問い合わせを行ったりしているので、コールドスタート踏んづけると 3 秒は無理です。\nタイムアウト必至ですね。</p>\n<h2 id=\"_3-秒経過後に-post-出来るか？\"><a class=\"header-anchor\" href=\"#_3-秒経過後に-post-出来るか？\" aria-hidden=\"true\">#</a> 3 秒経過後に POST 出来るか？</h2>\n<p>ただ、3 秒経った後に、Slack に POST する手段が無いわけではありません。</p>\n<blockquote>\n<p>Back when you received the data payload after the command was invoked, there will have been a <code>response_url</code> field included. This URL can be used to send responses after the 3000ms window has closed.</p>\n</blockquote>\n<p>cf. https://api.slack.com/slash-commands#responding_to_commands</p>\n<p>Slack からの RequestBody に含まれる <code>response_url</code> は、3 秒経った後も使えるので、そこに対して POST すれば OK です。</p>\n<p>タイムアウトするけど POST は受け付けてるので、結果、POST 出来ている、という例です。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/e2dfbaf6-ba26-ad46-f729-b217590d5b4a.png\" alt=\"image.png\">\nなんか奇妙な状態ですね。</p>\n<p>そして、動いてるとはいえタイムアウトなので、バッチリそういうログも残ります。画像は Firebase のログです。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/a5e8b390-cbbf-38c0-2e9f-004891a1be16.png\" alt=\"image.png\">\nアラートとか仕込んでるなら、アラート上がっちゃうかもしれません。\nなので、タイムアウトさせないようにしないといけません。</p>\n<h1 id=\"本題：対策方法\"><a class=\"header-anchor\" href=\"#本題：対策方法\" aria-hidden=\"true\">#</a> 本題：対策方法</h1>\n<ul>\n<li>3 秒以内に、レスポンスが返る必要がある</li>\n<li>でも、起動時間なども考えると、意外とシビア</li>\n<li>Slack への POST 自体は 3 秒経過後でも OK</li>\n</ul>\n<p>タイムアウト対策を調べると、非同期処理で Lambda から別の Lambda 呼ぶ……とか割と出てくるのですが、実はそこまでしなくても出来ました。\n<strong>とりあえず、レスポンスを真っ先に返して、そのまま処理続ければ良さそう</strong> です。\n処理続けるのも、非同期処理とか不要でした。</p>\n<h2 id=\"実際対策した結果はこちら\"><a class=\"header-anchor\" href=\"#実際対策した結果はこちら\" aria-hidden=\"true\">#</a> 実際対策した結果はこちら</h2>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/d7312b1d-2d4c-58fb-b826-e91b0cb4e998.gif\" alt=\"May-10-2019 01-24-47.gif\"></p>\n<p>体感で 7 秒くらい掛かってそうですが、タイムアウトの表示はされませんね！</p>\n<p>Firebase のログを見てみても、冒頭でお見せしたのとは違って、タイムアウトのログも残っていません。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/9870e4f6-e91e-4c59-24a2-de2170babf3b.png\" alt=\"image.png\"></p>\n<p>では、具体的にどのように対策したか、AWS Lambda の場合と、Cloud Functions for Firebase の場合とで、解説します。</p>\n<h2 id=\"aws-lambda-の場合\"><a class=\"header-anchor\" href=\"#aws-lambda-の場合\" aria-hidden=\"true\">#</a> AWS Lambda の場合</h2>\n<p>Lambda 関数のハンドラーの第 ３ 引数に、コールバックを指定することが出来ます。\nこのコールバック、ざっくり言うと <code>呼び出し元にレスポンスを明示的に返す</code> ということが出来ます。\nhttps://docs.aws.amazon.com/ja_jp/lambda/latest/dg/nodejs-prog-model-handler.html#nodejs-prog-model-handler-callback</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">lambdaHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">418</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Are you a teapot?\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>上記コードを記述した Lambda 関数を API Gateway 経由で API として呼び出した場合、API の呼び出し元に、HTTP Status が <code>418 I'm a teapot</code> 、ResponseBody が <code>Are you a teapot?</code> として返ってきます。</p>\n<blockquote>\n<p>Lambda 関数が同期的に呼び出された場合、コールバックでレスポンスの本文が返ります。</p>\n</blockquote>\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-services.html\" target=\"_blank\" rel=\"noopener noreferrer\">他のサービスで AWS Lambda を使用する - AWS Lambda<OutboundLink/></a> を見るに、<strong>API Gateway の場合は同期呼び出し</strong> になるので、要は、<strong>callback でもレスポンスを返せる</strong> ということです。</p>\n<p>そして重要なのが、<strong>callback した後も、return されるまで処理は続行</strong> されます。\nこんな Lambda 関数があったとします。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">lambdaHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">418</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Are you a teapot?'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a teapot.\"</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You are a teapot.'</span><span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'We are teapots!!!!'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                message<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello teapot'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div><!--beforeend--></div><!--afterend--><p>コレを動かすとこうなります。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/22f37750-2239-5e7b-8d85-c3ff094f052e.png\" alt=\"image.png\"></p>\n<p><code>200 OK</code> ではなく、<code>418 I'm a teapot</code> が返ってきながら、<code>console.log()</code> も実行されているのがお分かり頂けるかと思います。</p>\n<hr>\n<p>この <strong>callback した後も、return されるまで処理は続行される</strong> という性質を活かすと、以下のようなコードになります。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">lambdaHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 何よりもまず Slack にレスポンスを返す</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 以降は普通に処理続行</span>\n    <span class=\"token comment\">// some codes...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>処理の冒頭で、<code>callback</code> でとりあえず <code>200 OK</code> を返しておく</li>\n<li>あとは、3 秒の壁を気にせず、処理を続行する</li>\n<li>return で返す ResponseBody は空にする</li>\n</ul>\n<p>こんな流れになります。</p>\n<p>3点目は別に好き好きではあるのですが、律儀に返すと、Slack も律儀に表示してくれちゃうので、注意が必要です。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/d86220db-c275-5f08-02cb-cacd4c381fd1.png\" alt=\"image.png\"></p>\n<p>実際に、私が自作の Slack Bot で実装したコードはこちらです。\nhttps://github.com/saken649/NameThinkingLambda/blob/master/name-thinking/app.js</p>\n<h2 id=\"cloud-functions-for-firebase-の場合\"><a class=\"header-anchor\" href=\"#cloud-functions-for-firebase-の場合\" aria-hidden=\"true\">#</a> Cloud Functions for Firebase の場合</h2>\n<p>Cloud Functions for Firebase は Lambda に比べるとかなりライトな印象です。\n<a href=\"https://firebase.google.com/docs/functions/http-events?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">Express ベースで普通に動いちゃう<OutboundLink/></a> くらいなので、Express を少しでも触ったことがあるほうなら、すぐ取っ付けるのが特徴です。\nここでも、Express ベースで説明します。</p>\n<p>Express も例によって、レスポンスを返してもなお、その後の処理を続行させることが出来ます。\nhttps://expressjs.com/ja/4x/api.html#res.send</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> functions <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase-functions'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/teapot'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">418</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'We are teapots.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'He is a teapot.'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"She isn't a teapot...\"</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ah? Coffee cup?\"</span><span class=\"token punctuation\">)</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span>hello <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onRequest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend--><p>コレを動かすとこうなります。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/159578/3128e3e3-c55d-425b-403b-81879e8879aa.png\" alt=\"image.png\"></p>\n<p>こちらも <code>418 I'm a teapot</code> が返ってきながら、<code>console.log()</code> も実行されているのがお分かり頂けるかと思います。</p>\n<hr>\n<p>こちらも <strong><code>res.status().send()</code> した後も処理が続行される</strong> という性質を活かすと、以下のようなコードになります。</p>\n<!--beforebegin--><div class=\"language-javascript line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> functions <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firebase-functions'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/bot'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 何よりもまず Slack にレスポンスを返す</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 以降は普通に処理続行</span>\n    <span class=\"token comment\">// some codes...</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span>slack <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onRequest</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>処理の冒頭で、<code>res.status(200).send()</code> でとりあえず <code>200 OK</code> を返しておく</li>\n<li>あとは、3 秒の壁を気にせず、処理を続行する</li>\n<li><code>res.end()</code> で明示的に終了する</li>\n</ul>\n<p><a href=\"https://firebase.google.com/docs/functions/http-events?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">3 点目は公式マニュアルにそう書いてあります<OutboundLink/></a></p>\n<blockquote>\n<p>重要: すべての HTTP 関数が正しく終了するようにしてください。関数を正しく終了することで、関数が長時間実行されて過剰な課金がされるということがなくなります。res.redirect()、res.send()、res.end() で HTTP 関数を終了します。</p>\n</blockquote>\n<p>実際に、私が自作の Slack Bot で実装したコードはこちらです。[^1]\nhttps://github.com/saken649/NameThinking/blob/master/functions/index.js\n[^1]: Firebase 版が元ネタです。Lambda 版は、それを移植したものだったりします。</p>\n<h1 id=\"ちなみに\"><a class=\"header-anchor\" href=\"#ちなみに\" aria-hidden=\"true\">#</a> ちなみに</h1>\n<p>どちらの例でも <code>200 OK</code> を返していましたが、厳密に言うなら、受け付けただけで処理は終わってないので <code>202 Accepted</code> を返すのが適切かもしれませんね。\nhttps://developer.mozilla.org/ja/docs/Web/HTTP/Status/202</p>\n<p>自分のコードも、202 に書き換えちゃいました。\nので、冒頭でお見せした Firebase のログでは、202 で残っています。</p>\n<p>なお、問答無用で 200 番台を返すということは、裏を返すと、エラーが起きても 500 番台とか返せない、ということなので、その時の処理は、 <code>console.log()</code> の出し方などで、工夫してどうにかするしか無さそうです。\n私の Bot は大したことない個人運用の Bot なので特に考えてませんでしたが、業務利用する Bot の場合は、ちゃんと考えたほうが良さそうですね。</p>\n<h1 id=\"おわりに\"><a class=\"header-anchor\" href=\"#おわりに\" aria-hidden=\"true\">#</a> おわりに</h1>\n<p>真っ先にレスポンス返して、非同期でもなくそのまま処理が続く、というのは裏技的な感じもするのですが……\nひとまず、このような形でシンプルに対策が取れるので、サーバーレスで運用している Slack Bot のタイムアウト対策に苦労されているほうは、一度お試しください。</p>\n</div>\n",null]}